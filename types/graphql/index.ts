import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of CreateFavorite */
export type CreateFavoriteInput = {
  uid: Scalars['String'];
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateFavorite */
export type CreateFavoritePayload = {
  __typename?: 'CreateFavoritePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  favorite: Favorite;
  result?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of CreateParticipant */
export type CreateParticipantInput = {
  uid: Scalars['String'];
  projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateParticipant */
export type CreateParticipantPayload = {
  __typename?: 'CreateParticipantPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  participant: Participant;
  result?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  ownerUid: Scalars['String'];
  name: Scalars['String'];
  /** プロジェクト概要 */
  description?: Maybe<Scalars['String']>;
  /** GitHubリポジトリURL */
  githubUrl?: Maybe<Scalars['String']>;
  /** 開発期間：開始 */
  startsAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** 開発期間：終了 */
  endsAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** 使用技術1 */
  technology1?: Maybe<Scalars['String']>;
  /** 使用技術2 */
  technology2?: Maybe<Scalars['String']>;
  /** 使用技術3 */
  technology3?: Maybe<Scalars['String']>;
  /** 使用技術4 */
  technology4?: Maybe<Scalars['String']>;
  /** 使用技術5 */
  technology5?: Maybe<Scalars['String']>;
  /** 募集人数 */
  recruitmentNumbers?: Maybe<Scalars['Int']>;
  /** コミュニケーションツールのリンク */
  toolLink?: Maybe<Scalars['String']>;
  /** コントリビュート方法 */
  contribution?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateProject */
export type CreateProjectPayload = {
  __typename?: 'CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project?: Maybe<Project>;
  result?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  uid: Scalars['String'];
  githubId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
  user: User;
};

export type Favorite = {
  __typename?: 'Favorite';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  project: Project;
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};


export type Mutation = {
  __typename?: 'Mutation';
  createFavorite?: Maybe<CreateFavoritePayload>;
  createParticipant?: Maybe<CreateParticipantPayload>;
  createProject?: Maybe<CreateProjectPayload>;
  createUser?: Maybe<CreateUserPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationCreateFavoriteArgs = {
  input: CreateFavoriteInput;
};


export type MutationCreateParticipantArgs = {
  input: CreateParticipantInput;
};


export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type Participant = {
  __typename?: 'Participant';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  project: Project;
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
};

export type Project = {
  __typename?: 'Project';
  contribution?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  description?: Maybe<Scalars['String']>;
  endsAt?: Maybe<Scalars['ISO8601DateTime']>;
  githubUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  owner: User;
  recruitmentNumbers?: Maybe<Scalars['Int']>;
  startsAt?: Maybe<Scalars['ISO8601DateTime']>;
  technology1?: Maybe<Scalars['String']>;
  technology2?: Maybe<Scalars['String']>;
  technology3?: Maybe<Scalars['String']>;
  technology4?: Maybe<Scalars['String']>;
  technology5?: Maybe<Scalars['String']>;
  toolLink?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Query = {
  __typename?: 'Query';
  favorite: Favorite;
  paticipant: Participant;
  project: Project;
  projectFavorites: Array<Favorite>;
  projectParticipants: Array<Participant>;
  projects: Array<Project>;
  user: User;
  userFavorites: Array<Favorite>;
  userParticipants: Array<Participant>;
  users: Array<User>;
};


export type QueryFavoriteArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryPaticipantArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryProjectArgs = {
  id?: Maybe<Scalars['Int']>;
};


export type QueryProjectFavoritesArgs = {
  projectId?: Maybe<Scalars['ID']>;
};


export type QueryProjectParticipantsArgs = {
  projectId?: Maybe<Scalars['ID']>;
};


export type QueryUserArgs = {
  uid?: Maybe<Scalars['String']>;
};


export type QueryUserFavoritesArgs = {
  uid?: Maybe<Scalars['String']>;
};


export type QueryUserParticipantsArgs = {
  uid?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  uid: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['Boolean']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['ISO8601DateTime'];
  description: Scalars['String'];
  githubIconUrl: Scalars['String'];
  githubId: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  uid: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type GetProjectsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetProjectsQuery = (
  { __typename?: 'Query' }
  & { projects: Array<(
    { __typename?: 'Project' }
    & Pick<Project, 'id' | 'name' | 'description' | 'startsAt' | 'endsAt' | 'technology1' | 'technology2' | 'technology3' | 'technology4' | 'technology5' | 'recruitmentNumbers' | 'toolLink' | 'contribution'>
    & { owner: (
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name'>
    ) }
  )> }
);

export type CreateProjectMutationVariables = Exact<{
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  githubUrl?: Maybe<Scalars['String']>;
  startsAt?: Maybe<Scalars['ISO8601DateTime']>;
  endsAt?: Maybe<Scalars['ISO8601DateTime']>;
  technology1?: Maybe<Scalars['String']>;
  technology2?: Maybe<Scalars['String']>;
  technology3?: Maybe<Scalars['String']>;
  technology4?: Maybe<Scalars['String']>;
  technology5?: Maybe<Scalars['String']>;
  recruitmentNumbers?: Maybe<Scalars['Int']>;
  toolLink?: Maybe<Scalars['String']>;
  contribution?: Maybe<Scalars['String']>;
  ownerUid: Scalars['String'];
}>;


export type CreateProjectMutation = (
  { __typename?: 'Mutation' }
  & { createProject?: Maybe<(
    { __typename?: 'CreateProjectPayload' }
    & { project?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id' | 'name' | 'description' | 'startsAt' | 'endsAt' | 'technology1' | 'technology2' | 'technology3' | 'technology4' | 'technology5' | 'recruitmentNumbers' | 'toolLink' | 'contribution'>
      & { owner: (
        { __typename?: 'User' }
        & Pick<User, 'id' | 'name'>
      ) }
    )> }
  )> }
);

export type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUsersQuery = (
  { __typename?: 'Query' }
  & { users: Array<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name' | 'uid'>
  )> }
);

export type GetUserQueryVariables = Exact<{
  uid: Scalars['String'];
}>;


export type GetUserQuery = (
  { __typename?: 'Query' }
  & { user: (
    { __typename?: 'User' }
    & Pick<User, 'name' | 'uid' | 'description' | 'githubId' | 'githubIconUrl'>
  ) }
);

export type CreateUserMutationVariables = Exact<{
  uid: Scalars['String'];
  githubId: Scalars['String'];
}>;


export type CreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser?: Maybe<(
    { __typename?: 'CreateUserPayload' }
    & { user: (
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name' | 'uid'>
    ) }
  )> }
);

export type UpdateUserMutationVariables = Exact<{
  uid: Scalars['String'];
  name: Scalars['String'];
  description: Scalars['String'];
}>;


export type UpdateUserMutation = (
  { __typename?: 'Mutation' }
  & { updateUser?: Maybe<(
    { __typename?: 'UpdateUserPayload' }
    & { user: (
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name' | 'uid'>
    ) }
  )> }
);


export const GetProjectsDocument = gql`
    query GetProjects {
  projects {
    id
    name
    description
    startsAt
    endsAt
    technology1
    technology2
    technology3
    technology4
    technology5
    recruitmentNumbers
    toolLink
    contribution
    owner {
      id
      name
    }
  }
}
    `;

/**
 * __useGetProjectsQuery__
 *
 * To run a query within a React component, call `useGetProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetProjectsQuery(baseOptions?: Apollo.QueryHookOptions<GetProjectsQuery, GetProjectsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProjectsQuery, GetProjectsQueryVariables>(GetProjectsDocument, options);
      }
export function useGetProjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProjectsQuery, GetProjectsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProjectsQuery, GetProjectsQueryVariables>(GetProjectsDocument, options);
        }
export type GetProjectsQueryHookResult = ReturnType<typeof useGetProjectsQuery>;
export type GetProjectsLazyQueryHookResult = ReturnType<typeof useGetProjectsLazyQuery>;
export type GetProjectsQueryResult = Apollo.QueryResult<GetProjectsQuery, GetProjectsQueryVariables>;
export const CreateProjectDocument = gql`
    mutation CreateProject($name: String!, $description: String, $githubUrl: String, $startsAt: ISO8601DateTime, $endsAt: ISO8601DateTime, $technology1: String, $technology2: String, $technology3: String, $technology4: String, $technology5: String, $recruitmentNumbers: Int, $toolLink: String, $contribution: String, $ownerUid: String!) {
  createProject(
    input: {name: $name, description: $description, githubUrl: $githubUrl, startsAt: $startsAt, endsAt: $endsAt, technology1: $technology1, technology2: $technology2, technology3: $technology3, technology4: $technology4, technology5: $technology5, recruitmentNumbers: $recruitmentNumbers, toolLink: $toolLink, contribution: $contribution, ownerUid: $ownerUid}
  ) {
    project {
      id
      name
      description
      startsAt
      endsAt
      technology1
      technology2
      technology3
      technology4
      technology5
      recruitmentNumbers
      toolLink
      contribution
      owner {
        id
        name
      }
    }
  }
}
    `;
export type CreateProjectMutationFn = Apollo.MutationFunction<CreateProjectMutation, CreateProjectMutationVariables>;

/**
 * __useCreateProjectMutation__
 *
 * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({
 *   variables: {
 *      name: // value for 'name'
 *      description: // value for 'description'
 *      githubUrl: // value for 'githubUrl'
 *      startsAt: // value for 'startsAt'
 *      endsAt: // value for 'endsAt'
 *      technology1: // value for 'technology1'
 *      technology2: // value for 'technology2'
 *      technology3: // value for 'technology3'
 *      technology4: // value for 'technology4'
 *      technology5: // value for 'technology5'
 *      recruitmentNumbers: // value for 'recruitmentNumbers'
 *      toolLink: // value for 'toolLink'
 *      contribution: // value for 'contribution'
 *      ownerUid: // value for 'ownerUid'
 *   },
 * });
 */
export function useCreateProjectMutation(baseOptions?: Apollo.MutationHookOptions<CreateProjectMutation, CreateProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, options);
      }
export type CreateProjectMutationHookResult = ReturnType<typeof useCreateProjectMutation>;
export type CreateProjectMutationResult = Apollo.MutationResult<CreateProjectMutation>;
export type CreateProjectMutationOptions = Apollo.BaseMutationOptions<CreateProjectMutation, CreateProjectMutationVariables>;
export const GetUsersDocument = gql`
    query GetUsers {
  users {
    id
    name
    uid
  }
}
    `;

/**
 * __useGetUsersQuery__
 *
 * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);
      }
export function useGetUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, options);
        }
export type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;
export type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;
export type GetUsersQueryResult = Apollo.QueryResult<GetUsersQuery, GetUsersQueryVariables>;
export const GetUserDocument = gql`
    query GetUser($uid: String!) {
  user(uid: $uid) {
    name
    uid
    description
    githubId
    githubIconUrl
  }
}
    `;

/**
 * __useGetUserQuery__
 *
 * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserQuery({
 *   variables: {
 *      uid: // value for 'uid'
 *   },
 * });
 */
export function useGetUserQuery(baseOptions: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
      }
export function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);
        }
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;
export const CreateUserDocument = gql`
    mutation CreateUser($uid: String!, $githubId: String!) {
  createUser(input: {uid: $uid, githubId: $githubId}) {
    user {
      id
      name
      uid
    }
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      uid: // value for 'uid'
 *      githubId: // value for 'githubId'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($uid: String!, $name: String!, $description: String!) {
  updateUser(input: {uid: $uid, name: $name, description: $description}) {
    user {
      id
      name
      uid
    }
  }
}
    `;
export type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      uid: // value for 'uid'
 *      name: // value for 'name'
 *      description: // value for 'description'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;